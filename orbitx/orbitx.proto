// If you're getting 'orbitx_pb2 module not found' errors,
// remember to run `make` or `make proto`!!

// A syntax note: in a protobuf definition, 'double x = 10;' does not mean
// that the starting value of x will be 10, it just means that x is the tenth
// field. This is used for backwards compatibility purposes.
syntax = "proto3";

// These protobuf objects are good for serializing this data to other things,
// like JSON or over the network. GRPC requires protobufs as well!
// Google 'protobuf python generated code reference' for more examples of
// protobuf APIs.
// The main thing to keep in mind is that this file will _generate_ python code
// used by other modules.
// You usually don't have to care about this! Just use the wrappers for these
// protobuf messages in state.py.

// Keep state in sync with all clients
// This is a GRPC protobuf definition, not just plain protobuf code.
// Look in network.py to see how this is used.
service StateServer {
    rpc get_physical_state (stream Command) returns (PhysicalState) {}
}

// Keep this enum in sync with the corresponding enum in state.py!
enum Navmode {
    MANUAL = 0;
    CCW_PROG = 1;
    CW_RETRO = 2;
    DEPRT_REF = 3;
    APP_TARG = 4;
    PRO_VTRG = 5;
    RETR_VTRG = 6;
}

// This message is how we communicate between different parts of OrbitX. For
// example, the GUI might send this to the physics engine in the same process,
// or a different program on another computer might send this over the network.
message Command {
    // Used in network.py to provide a per-client identifier.
    enum ClientType {
        INVALID = 0;
        MC_FLIGHT = 1;
        HAB_FLIGHT = 2;
        COMPAT = 3;
        MIST = 4;
        HAB_ENG = 5;
    }

    enum Idents {
        NOOP = 0;
        HAB_SPIN_CHANGE = 1;
        HAB_THROTTLE_CHANGE = 2;
        HAB_THROTTLE_SET = 3;
        TIME_ACC_SET = 4;
        ENGINEERING_UPDATE = 5;
        UNDOCK = 6;
        REFERENCE_UPDATE = 7;
        TARGET_UPDATE = 8;
        LOAD_SAVEFILE = 9;
        NAVMODE_SET = 10;
        PARACHUTE = 11;
        IGNITE_SRBS = 12;
        TOGGLE_COMPONENT = 13;
        TOGGLE_RADIATOR = 14;
        CONNECT_RADIATOR_TO_LOOP = 15;
        TOGGLE_COMPONENT_COOLANT = 16;
    }

    enum ModuleState {
        // The state of the detachable module. This is changed by OrbitV ENG,
        // but has to be represented in OrbitV and OrbitX flight.
        // This enum has values of 10, 20, 30 unlike other enums because
        // we don't want to confuse the numerical value of this enum with the
        // numerical value that OrbitV assigns to these states; [0, 1, 2].
        UNSET = 0;
        NO_MODULE = 10;
        DOCKED_MODULE = 20;
        DETACHED_MODULE = 30;
    }

    message OrbitVEngineeringUpdate {
        int32 nav_malfunction = 1;
        double max_thrust = 2;
        double hab_fuel = 3;
        double ayse_fuel = 4;
        bool hab_meltdown = 5;
        bool ayse_meltdown = 6;
        ModuleState module_state = 7;
        bool radar = 8;
        bool ins = 9;
        bool los = 10;
        string wind_source_entity = 11;
        double wind_speed = 12;
        double wind_angle = 13;
    }

    message RadiatorToLoop {
        int32 rad = 1;
        int32 loop = 2;
    }

    message ComponentToLoop {
        // A 0-indexed index of what component is being toggled
        int32 component = 1;
        // A 0-indexed index of what coolant loop the component is toggling its
        // connection state to
        int32 loop = 2;
    }

    ClientType client = 1;
    Idents ident = 2;

    oneof arg {
        double spin_change = 3;
        double throttle_change = 4;
        double throttle_set = 5;
        double time_acc_set = 6;
        OrbitVEngineeringUpdate engineering_update = 7;
        string reference = 8;
        string target = 9;
        string loadfile = 10;
        Navmode navmode = 11;
        bool deploy_parachute = 12;
        int32 component_to_toggle = 13;
        int32 radiator_to_toggle = 14;
        RadiatorToLoop radiator_to_loop = 15;
        ComponentToLoop component_to_loop = 16;
    }
}

message EngineeringState {
    message Component {
        bool connected = 1;
        double temperature = 2;
        double resistance = 3;
        double voltage = 4;
        double current = 5;
        // coolant_connections stores a list of whether each of the three coolant loops are connected to the component
        // 'True' means the coolant is connected, 'False' means the component is disconnected
        // Index 0 = Hab coolant 1, Index 1 = Hab coolant 2, Index 2 = Ayse Coolant
        repeated bool coolant_connections = 6;
    }

    message CoolantLoop {
        double coolant_temp = 1;
        bool primary_pump_on = 2;
        bool secondary_pump_on = 3;
    }

    message Radiator {
        int32 attached_to_coolant_loop = 1;
        bool functioning = 2;  // If the radiator is stowed or broken, it is not functioning.
    }

    repeated Component components = 1;
    repeated CoolantLoop coolant_loops = 2;
    repeated Radiator radiators = 3;

    bool master_alarm = 4;
    bool radiation_alarm = 5;
    bool asteroid_alarm = 6;
    bool hab_reactor_alarm = 7;
    bool ayse_reactor_alarm = 8;
    bool hab_gnomes = 9;

    int32 rad_shield_percentage = 10;
}

// This is wrapped by state.py.
message Entity {
    string name = 1;
    double x = 2;
    double y = 3;
    double vx = 4;
    double vy = 5;
    double r = 6;
    double mass = 7;
    double heading = 8; // the 'angular position'
    double spin = 9; // the 'angular velocity'
    double fuel = 10; // only spaceships have fuel
    double throttle = 11;
    string landed_on = 12; // another entity this entity is landed on
    bool broken = 13;
    bool artificial = 14;
    double atmosphere_thickness = 15;
    double atmosphere_scaling = 16;
}

// To use this in python code, think of `entities` as a list, except to add an
// item to the list you have to use the special `add(...)` method. For example,
// ps = PhysicalState()
// ps.timestamp = 5
// or equivalently, ps = PhysicalState(timestamp=5)
// then,
// entity0 = ps.entities.add()
// entity0.name = 'bob'
// ps.entities[0] == entity0
// or you can also do
// ps.entities.add(name='belize')
// ps.entities[1].name == 'belize'
// This comes with all the usual python list goodness, like
// for entity in ps.entities:
//     log.info(entity.name)
// Again, googling 'protobuf python generated code reference' and looking for
// repeated fields will help answer other questions.
message PhysicalState {
    repeated Entity entities = 1;
    double timestamp = 2;
    double time_acc = 3;
    string craft = 4;
    string reference = 5;
    string target = 6;
    Navmode navmode = 7;
    // This SRB time field is intentionally similar in design to the OrbitV
    // implementation, namely just a timer for how long the SRBs run.
    // srb_time = -1 means the SRB is full and hasn't been used yet,
    // srb_time = -2 means the SRB is empty. These contants are in common.py
    double srb_time = 8;
    bool parachute_deployed = 9;

    EngineeringState engineering = 10;
}
